// <auto-generated />
using System;
using Data.App.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.migrations.app
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210225070558_app")]
    partial class app
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("App")
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Data.App.Models.Appointments.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusReason")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ChildId");

                    b.HasIndex("ClinicId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Data.App.Models.Appointments.AppointmentTimeline", b =>
                {
                    b.Property<string>("AppointmentTimelineId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("AppointmentTimelineId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentTimeline");
                });

            modelBuilder.Entity("Data.App.Models.Calendars.Calendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Month")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quarter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Date");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("Data.App.Models.Chats.Chat", b =>
                {
                    b.Property<string>("ChatId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastChatMessageId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatMessage", b =>
                {
                    b.Property<string>("ChatMessageId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("ChatMessageType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatReceiver", b =>
                {
                    b.Property<string>("ChatReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastChatMessageId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ChatReceiverId");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("ChatReceiver");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.Clinic", b =>
                {
                    b.Property<string>("ClinicId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<double>("GeoX")
                        .HasColumnType("REAL");

                    b.Property<double>("GeoY")
                        .HasColumnType("REAL");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.ClinicBusinessHour", b =>
                {
                    b.Property<string>("ClinicBusinessHourId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ClinicBusinessHourId");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicBusinessHour");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.ClinicReview", b =>
                {
                    b.Property<string>("ClinicReviewId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClinicReviewId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ParentId");

                    b.ToTable("ClinicReview");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.ClinicStaff", b =>
                {
                    b.Property<string>("ClinicStaffId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ClinicStaffId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StaffId");

                    b.ToTable("ClinicStaff");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Data.App.Models.FileUploads.FileUpload", b =>
                {
                    b.Property<string>("FileUploadId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentDisposition")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<long>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("FileUploadId");

                    b.ToTable("FileUpload");
                });

            modelBuilder.Entity("Data.App.Models.Notifications.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconClass")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Data.App.Models.Notifications.NotificationReceiver", b =>
                {
                    b.Property<string>("NotificationReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateRead")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("TEXT");

                    b.Property<string>("NotificationId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationReceiverId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("NotificationReceiver");
                });

            modelBuilder.Entity("Data.App.Models.Parents.Child", b =>
                {
                    b.Property<string>("ChildId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ParentId");

                    b.ToTable("Child");
                });

            modelBuilder.Entity("Data.App.Models.Parents.ChildMedicalEntry", b =>
                {
                    b.Property<string>("ChildMedicalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<double>("Age")
                        .HasColumnType("REAL");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<double>("ChestCircumference")
                        .HasColumnType("REAL");

                    b.Property<string>("ChildId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateReturn")
                        .HasColumnType("TEXT");

                    b.Property<double>("HeadCircumference")
                        .HasColumnType("REAL");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("ChildMedicalEntryId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildMedicalEntry");
                });

            modelBuilder.Entity("Data.App.Models.Parents.Parent", b =>
                {
                    b.Property<string>("ParentId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ParentId");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("Data.App.Models.Parents.ParentClinic", b =>
                {
                    b.Property<string>("ParentClinicId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("ParentClinicId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("ParentId");

                    b.ToTable("ParentClinic");
                });

            modelBuilder.Entity("Data.App.Models.Users.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Data.App.Models.Users.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<double>("OverallRating")
                        .HasColumnType("REAL");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalRating")
                        .HasColumnType("REAL");

                    b.HasKey("UserId");

                    b.HasIndex("ImageId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTask", b =>
                {
                    b.Property<string>("UserTaskId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateActualCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("UserTaskId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTask");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTaskItem", b =>
                {
                    b.Property<string>("UserTaskItemId")
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserTaskId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("TEXT");

                    b.HasKey("UserTaskItemId");

                    b.HasIndex("UserTaskId");

                    b.ToTable("UserTaskItem");
                });

            modelBuilder.Entity("Data.App.Models.Appointments.Appointment", b =>
                {
                    b.HasOne("Data.App.Models.Parents.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Clinics.Clinic", "Clinic")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Data.App.Models.Appointments.AppointmentTimeline", b =>
                {
                    b.HasOne("Data.App.Models.Appointments.Appointment", "Appointment")
                        .WithMany("Timelines")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany("AppointmentTimelines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatMessage", b =>
                {
                    b.HasOne("Data.App.Models.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Data.App.Models.Chats.ChatReceiver", b =>
                {
                    b.HasOne("Data.App.Models.Chats.Chat", "Chat")
                        .WithMany("Receivers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.Clinic", b =>
                {
                    b.HasOne("Data.App.Models.Chats.Chat", "Chat")
                        .WithOne()
                        .HasForeignKey("Data.App.Models.Clinics.Clinic", "ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.ClinicBusinessHour", b =>
                {
                    b.HasOne("Data.App.Models.Clinics.Clinic", "Clinic")
                        .WithMany("BusinessHours")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.ClinicReview", b =>
                {
                    b.HasOne("Data.App.Models.Clinics.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Parents.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.ClinicStaff", b =>
                {
                    b.HasOne("Data.App.Models.Clinics.Clinic", "Clinic")
                        .WithMany("Staffs")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Clinics.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Role");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.Staff", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Data.App.Models.Clinics.Staff", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Notifications.NotificationReceiver", b =>
                {
                    b.HasOne("Data.App.Models.Notifications.Notification", "Notification")
                        .WithMany("Receivers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "Receiver")
                        .WithMany("NotificationReceivers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Data.App.Models.Parents.Child", b =>
                {
                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Data.App.Models.Parents.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.App.Models.Parents.ChildMedicalEntry", b =>
                {
                    b.HasOne("Data.App.Models.Appointments.Appointment", "Appointment")
                        .WithMany("MedicalEntries")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Parents.Child", "Child")
                        .WithMany("MedicalEntries")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Data.App.Models.Parents.Parent", b =>
                {
                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Data.App.Models.Parents.Parent", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Parents.ParentClinic", b =>
                {
                    b.HasOne("Data.App.Models.Clinics.Clinic", "Clinic")
                        .WithMany("ParentClinics")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Parents.Parent", "Parent")
                        .WithMany("ParentClinics")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.App.Models.Users.User", b =>
                {
                    b.HasOne("Data.App.Models.FileUploads.FileUpload", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserRole", b =>
                {
                    b.HasOne("Data.App.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTask", b =>
                {
                    b.HasOne("Data.App.Models.Users.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.App.Models.Users.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTaskItem", b =>
                {
                    b.HasOne("Data.App.Models.Users.UserTask", "UserTask")
                        .WithMany("UserTaskItems")
                        .HasForeignKey("UserTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("Data.App.Models.Appointments.Appointment", b =>
                {
                    b.Navigation("MedicalEntries");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("Data.App.Models.Chats.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Data.App.Models.Clinics.Clinic", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("BusinessHours");

                    b.Navigation("ParentClinics");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Data.App.Models.Notifications.Notification", b =>
                {
                    b.Navigation("Receivers");
                });

            modelBuilder.Entity("Data.App.Models.Parents.Child", b =>
                {
                    b.Navigation("MedicalEntries");
                });

            modelBuilder.Entity("Data.App.Models.Parents.Parent", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ParentClinics");
                });

            modelBuilder.Entity("Data.App.Models.Users.User", b =>
                {
                    b.Navigation("AppointmentTimelines");

                    b.Navigation("NotificationReceivers");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("Data.App.Models.Users.UserTask", b =>
                {
                    b.Navigation("UserTaskItems");
                });
#pragma warning restore 612, 618
        }
    }
}
